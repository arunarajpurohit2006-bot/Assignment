#include <stdio.h>
#include <stdlib.h>
int** allocateMatrix(int n) {
    int** mat = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++)
        mat[i] = (int*)malloc(n * sizeof(int));
    return mat;
}
void addMatrix(int **A, int **B, int **C, int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] + B[i][j];
}
void subMatrix(int **A, int **B, int **C, int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] - B[i][j];
}
void strassen(int **A, int **B, int **C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }
    int k = n / 2;
    int **A11 = allocateMatrix(k), **A12 = allocateMatrix(k),
        **A21 = allocateMatrix(k), **A22 = allocateMatrix(k);
    int **B11 = allocateMatrix(k), **B12 = allocateMatrix(k),
        **B21 = allocateMatrix(k), **B22 = allocateMatrix(k);
    int **C11 = allocateMatrix(k), **C12 = allocateMatrix(k),
        **C21 = allocateMatrix(k), **C22 = allocateMatrix(k);
    int **M1 = allocateMatrix(k), **M2 = allocateMatrix(k),
        **M3 = allocateMatrix(k), **M4 = allocateMatrix(k),
        **M5 = allocateMatrix(k), **M6 = allocateMatrix(k),
        **M7 = allocateMatrix(k);
    int **temp1 = allocateMatrix(k), **temp2 = allocateMatrix(k);
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < k; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + k];
            A21[i][j] = A[i + k][j];
            A22[i][j] = A[i + k][j + k];
            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + k];
            B21[i][j] = B[i + k][j];
            B22[i][j] = B[i + k][j + k];
        }
    }
    addMatrix(A11, A22, temp1, k);
    addMatrix(B11, B22, temp2, k);
    strassen(temp1, temp2, M1, k);
    addMatrix(A21, A22, temp1, k);
    strassen(temp1, B11, M2, k);
    subMatrix(B12, B22, temp2, k);
    strassen(A11, temp2, M3, k);
    subMatrix(B21, B11, temp2, k);
    strassen(A22, temp2, M4, k);
    addMatrix(A11, A12, temp1, k);
    strassen(temp1, B22, M5, k);
    subMatrix(A21, A11, temp1, k);
    addMatrix(B11, B12, temp2, k);
    strassen(temp1, temp2, M6, k);
    subMatrix(A12, A22, temp1, k);
    addMatrix(B21, B22, temp2, k);
    strassen(temp1, temp2, M7, k);
    addMatrix(M1, M4, temp1, k);
    subMatrix(temp1, M5, temp2, k);
    addMatrix(temp2, M7, C11, k);
    addMatrix(M3, M5, C12, k);
    addMatrix(M2, M4, C21, k);
    subMatrix(M1, M2, temp1, k);
    addMatrix(temp1, M3, temp2, k);
    addMatrix(temp2, M6, C22, k);
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < k; j++) {
            C[i][j] = C11[i][j];
            C[i][j + k] = C12[i][j];
            C[i + k][j] = C21[i][j];
            C[i + k][j + k] = C22[i][j];
        }
    }
}
void printMatrix(int **mat, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            printf("%d ", mat[i][j]);
        printf("\n");
    }
}
int main() {
    int n = 2;
    int **A = allocateMatrix(n);
    int **B = allocateMatrix(n);
    int **C = allocateMatrix(n);
    A[0][0] = 6; A[0][1] = 1;
    A[1][0] = 8; A[1][1] = 4;
    B[0][0] = 5; B[0][1] = 3;
    B[1][0] = 7; B[1][1] = 9;
    strassen(A, B, C, n);
    printf("Result Matrix:\n");
    printMatrix(C, n);
    return 0;
}
